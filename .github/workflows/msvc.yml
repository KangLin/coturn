name: msvc

on: [push]

jobs:
  compile:
    name: ${{ matrix.os }}-${{matrix.CMAKE_GENERATOR}}-${{matrix.CMAKE_GENERATOR_PLATFORM}}-${{matrix.BUILD_TYPE}}-${{matrix.BUILD_SHARED_LIBS}}

    strategy:
      matrix:
        BUILD_TYPE: [Release, Debug]
        BUILD_SHARED_LIBS: [OFF]
        os: [windows-2022] #, windows-2019]
        include:
          - os: windows-2022
            triplet: x64-windows
            VCPKG_PLATFORM_TOOLSET: v143
            CMAKE_GENERATOR_PLATFORM: x64
            CMAKE_GENERATOR: "Visual Studio 17 2022"

#          - os: windows-2019
#            triplet: x64-windows
#            VCPKG_PLATFORM_TOOLSET: v142
#            CMAKE_GENERATOR_PLATFORM: x64
#            CMAKE_GENERATOR: "Visual Studio 16 2019"

    runs-on: ${{ matrix.os }}

    env:
      SOURCE_DIR:  ${{github.workspace}}\.cache\source
      TOOSL_DIR:   ${{github.workspace}}\.cache\tools
      INSTALL_DIR: ${{github.workspace}}\.cache\install_msvc_${{matrix.triplet}}_${{matrix.BUILD_TYPE}}_2022_02_14
      #TODO: modify version
      COTURN_VERSION: v4.5.2
      VCPKGGITCOMMITID: ed6dc3a43f976099525c5dcde2bfe7dc4092fb3d
      CMAKE_GENERATOR: ${{matrix.CMAKE_GENERATOR}}
      CMAKE_GENERATOR_PLATFORM: ${{matrix.CMAKE_GENERATOR_PLATFORM}}

    defaults:
      run:
        shell: cmd

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: make directory
      run: |
        cmake -E make_directory ${{env.SOURCE_DIR}}
        cmake -E make_directory ${{env.TOOSL_DIR}}
        cmake -E make_directory ${{env.INSTALL_DIR}}

    - name: Cache installed
      uses: actions/cache@v2
      id: cache-installed
      with:
        path: |
          ${{env.INSTALL_DIR}}
        key: cache-installed-${{matrix.os}}-${{matrix.BUILD_TYPE}}

    - name: run-vcpkg
      uses: lukka/run-vcpkg@v7.4
      with:
        # Indicates whether to only setup vcpkg (i.e. installing it and setting the environment variables VCPKG_ROOT, RUNVCPK_VCPKG_ROOT), without installing any port.
        #setupOnly: # optional
        #vcpkgGitURL: https://github.com/KangLin/vcpkg.git
        vcpkgGitCommitId: ${{env.VCPKGGITCOMMITID}}
        vcpkgDirectory: ${{runner.workspace}}/vcpkg/
        # Since the cache must be invalidated when content of the vcpkg.json file changes, let's
        # compute its hash and append this to the computed cache's key.
        appendedCacheKey: cache-vcpkg-msvc-${{matrix.os}}-${{matrix.BUILD_TYPE}}-${{env.VCPKGGITCOMMITID}}
        #additionalCachedPaths: ${{ env.VCPKG_ROOT }}/installed
        vcpkgTriplet: '${{matrix.triplet}}'
        vcpkgArguments: 'zlib openssl pthreads' # libodb-sqlite  libodb-pgsql'

    - name: build libevent
      run: |
        IF NOT EXIST ${{env.INSTALL_DIR}}\lib\cmake\LibeventConfig.cmake (
            git clone -b release-2.1.7-rc https://github.com/libevent/libevent.git
            cd libevent
            cmake -E make_directory build
            cd build
            cmake .. -DCMAKE_BUILD_TYPE=${{matrix.BUILD_TYPE}} ^
                -DCMAKE_INSTALL_PREFIX="${{env.INSTALL_DIR}}" ^
                -DCMAKE_TOOLCHAIN_FILE="${{env.VCPKG_ROOT}}/scripts/buildsystems/vcpkg.cmake"
            cmake --build . --config ${{matrix.BUILD_TYPE}}
            cmake --build . --config ${{matrix.BUILD_TYPE}} --target install
        )

    - name: build coturn
      run: |
        cmake -E make_directory ${{github.workspace}}/build
        cd ${{github.workspace}}/build
        cmake ${{github.workspace}} ^
            -G "${{env.CMAKE_GENERATOR}}" ^
            -DCMAKE_GENERATOR_PLATFORM=${{matrix.CMAKE_GENERATOR_PLATFORM}} ^
            -DBUILD_SHARED_LIBS=${{matrix.BUILD_SHARED_LIBS}} ^
            -DCMAKE_BUILD_TYPE=${{matrix.BUILD_TYPE}} ^
            -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/build/install ^
            -DLibevent_DIR=${{env.INSTALL_DIR}}\lib\cmake ^
            -DCMAKE_TOOLCHAIN_FILE=${{env.VCPKG_ROOT}}/scripts/buildsystems/vcpkg.cmake
        cmake --build . --config ${{matrix.BUILD_TYPE}}

    - name: Package
      if: ${{ matrix.BUILD_TYPE == 'Release' }}
      working-directory: ${{github.workspace}}\build
      run: |
        cmake --build . --config ${{matrix.BUILD_TYPE}} --target install
        copy /Y ${{env.INSTALL_DIR}}\bin\*.dll install\bin
        copy /Y ${{env.INSTALL_DIR}}\lib\*.dll install\bin
        copy /Y ${{env.RUNVCPKG_VCPKG_ROOT}}\installed\${{env.RUNVCPKG_VCPKG_TRIPLET_OUT}}\bin\*.dll install\bin
        7z a coturn_windows_msvc_${{env.COTURN_VERSION}}.zip .\install\*
        cpack

    - name: update 
      uses: actions/upload-artifact@v2
      with:
        name: coturn_${{ matrix.os }}
        path: |
          ${{github.workspace}}\build\coturn_windows_msvc_${{env.COTURN_VERSION}}.zip
          ${{github.workspace}}\build\coturn-*-Windows-AMD64.exe
      if: ${{ matrix.BUILD_TYPE == 'Release' }}

#    - name: Upload To Github Release
#      if: ${{ matrix.BUILD_TYPE == 'Release' && startsWith(github.ref, 'refs/tags/') }}
#      uses: softprops/action-gh-release@v1
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#      with:
#        prerelease: true
#        body:
#        files: |
#          ${{github.workspace}}\build\coturn_windows_msvc_${{env.COTURN_VERSION}}.zip
