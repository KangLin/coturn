name: msvc

on: [push]

jobs:
  compile:
    name: ${{matrix.os}}-vc-${{matrix.VCPKG_PLATFORM_TOOLSET}}-${{matrix.CMAKE_GENERATOR_PLATFORM}}-${{matrix.BUILD_TYPE}}-${{matrix.BUILD_SHARED_LIBS}}

    strategy:
      matrix:
        BUILD_TYPE: [Release, Debug]
        BUILD_SHARED_LIBS: [OFF]
        #VCPKG_PLATFORM_TOOLSET: [v143, v142, v141]
        CMAKE_GENERATOR_PLATFORM: [x64, Win32]
        os: [windows-latest]
        include:
          # MSVC 2022
          - triplet: x64-windows
            VCPKG_PLATFORM_TOOLSET: v143
            CMAKE_GENERATOR_PLATFORM: x64

          - triplet: x86-windows
            VCPKG_PLATFORM_TOOLSET: v143
            CMAKE_GENERATOR_PLATFORM: Win32

          # MSVC 2019
          - triplet: x86-windows
            VCPKG_PLATFORM_TOOLSET: v142
            CMAKE_GENERATOR_PLATFORM: Win32
 
          # MSVC 2017
          - triplet: x86-windows
            VCPKG_PLATFORM_TOOLSET: v141
            CMAKE_GENERATOR_PLATFORM: Win32
 
    runs-on: ${{matrix.os}}

    env:
      SOURCE_DIR:  ${{github.workspace}}\.cache\source
      TOOSL_DIR:   ${{github.workspace}}\.cache\tools
      INSTALL_DIR: ${{github.workspace}}\.cache\install_msvc_${{matrix.triplet}}_${{matrix.BUILD_TYPE}}
      VCPKGGITCOMMITID: acc3bcf76b84ae5041c86ab55fe138ae7b8255c7
      VCPKG_PLATFORM_TOOLSET: ${{matrix.VCPKG_PLATFORM_TOOLSET}}
      CMAKE_GENERATOR_PLATFORM: ${{matrix.CMAKE_GENERATOR_PLATFORM}}

    defaults:
      run:
        shell: cmd

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: make directory
      run: |
        cmake -E make_directory ${{env.SOURCE_DIR}}
        cmake -E make_directory ${{env.TOOSL_DIR}}
        cmake -E make_directory ${{env.INSTALL_DIR}}

    - name: Cache installed
      uses: actions/cache@v2
      id: cache-installed
      with:
        path: |
          ${{env.INSTALL_DIR}}
        key: coturn-cache-installed-${{matrix.os}}-vc${{matrix.VCPKG_PLATFORM_TOOLSET}}-${{matrix.triplet}}-${{matrix.BUILD_TYPE}}

    - name: run-vcpkg
      uses: lukka/run-vcpkg@v10
      with:
        # This is the default location of the directory containing vcpkg sources.
        # Change it to the right location if needed.
        # vcpkgDirectory: '${{ github.workspace }}/vcpkg'

        # If not using a submodule for vcpkg sources, this specifies which commit
        # id must be checkout from a Git repo. It must not set if using a submodule
        # for vcpkg.
        vcpkgGitCommitId: '${{ env.VCPKGGITCOMMITID }}'
        # Since the cache must be invalidated when content of the vcpkg.json file changes, let's
        # compute its hash and append this to the computed cache's key.
        appendedCacheKey: coturn-msvc-${{matrix.os}}-vc${{matrix.VCPKG_PLATFORM_TOOLSET}}-${{matrix.triplet}}-${{matrix.BUILD_TYPE}}-${{env.VCPKGGITCOMMITID}}

        # This is the glob expression used to locate the vcpkg.json and add its
        # hash to the cache key. Change it to match a single manifest file you want
        # to use. 
        # Note: do not use `${{ github.context }}` to compose the value as it 
        # contains backslashes that would be misinterpreted. Instead
        # compose a value relative to the root of the repository using 
        # `**/path/from/root/of/repo/to/vcpkg.json` to match the desired `vcpkg.json`.
        # vcpkgJsonGlob: '**/vcpkg.json'

        # This is needed to run `vcpkg install` command (after vcpkg is built) in
        # the directory where vcpkg.json has been located. Default is false,
        # It is highly suggested to let `run-cmake` to run vcpkg (i.e. `false`)
        # (i.e. let CMake run `vcpkg install`) using the vcpkg.cmake toolchain.
        # runVcpkgInstall: true

 #   - name: build libevent
 #     working-directory: ${{env.SOURCE_DIR}}
 #     run: |
 #       IF NOT EXIST ${{env.INSTALL_DIR}}\cmake\LibeventConfig.cmake (
 #           git clone -b release-2.1.7-rc https://github.com/libevent/libevent.git
 #           cd libevent
 #           cmake -E make_directory build
 #           cd build
 #           cmake .. ^
 #               -A ${{matrix.CMAKE_GENERATOR_PLATFORM}} ^
 #               -T ${{matrix.VCPKG_PLATFORM_TOOLSET}} ^
 #               -DCMAKE_BUILD_TYPE=${{matrix.BUILD_TYPE}} ^
 #               -DCMAKE_INSTALL_PREFIX="${{env.INSTALL_DIR}}" ^
 #               -DBUILD_TESTING=OFF ^
 #               -DCMAKE_TOOLCHAIN_FILE="${{env.VCPKG_ROOT}}/scripts/buildsystems/vcpkg.cmake"
 #           cmake --build . --config ${{matrix.BUILD_TYPE}}
 #           cmake --build . --config ${{matrix.BUILD_TYPE}} --target install
 #       )

    - name: build coturn
      run: |
        cmake -E make_directory ${{github.workspace}}/build
        cd ${{github.workspace}}/build
        cmake ${{github.workspace}} ^
            -A ${{matrix.CMAKE_GENERATOR_PLATFORM}} ^
            -T ${{matrix.VCPKG_PLATFORM_TOOLSET}} ^
            -DWITH_MYSQL=OFF ^
            -DBUILD_SHARED_LIBS=${{matrix.BUILD_SHARED_LIBS}} ^
            -DCMAKE_BUILD_TYPE=${{matrix.BUILD_TYPE}} ^
            -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/build/install ^
            -DCMAKE_TOOLCHAIN_FILE=${{env.VCPKG_ROOT}}/scripts/buildsystems/vcpkg.cmake
        cmake --build . --config ${{matrix.BUILD_TYPE}}
        cmake --build . --config ${{matrix.BUILD_TYPE}} --target install

    - name: Package
      if: ${{ matrix.BUILD_TYPE == 'Release' }}
      working-directory: ${{github.workspace}}\build
      run: |
        copy /Y ${{env.INSTALL_DIR}}\bin\*.dll install\bin
        copy /Y ${{env.INSTALL_DIR}}\lib\*.dll install\bin
        copy /Y ${{env.RUNVCPKG_VCPKG_ROOT}}\installed\${{env.RUNVCPKG_VCPKG_TRIPLET_OUT}}\bin\*.dll install\bin
        7z a coturn_windows_msvc.zip ${{github.workspace}}\build\install\*
        cmake --build . --config ${{matrix.BUILD_TYPE}} --target package

#    - name: Show fail information
#      if: ${{ failure() }}
#      run: |
#        echo "Show fail information"
#        type ${{github.workspace}}\build\_CPack_Packages\Windows-AMD64\NSIS\NSISOutput.log

    - name: update 
      if: ${{ matrix.BUILD_TYPE == 'Release' }}
      uses: actions/upload-artifact@v2
      with:
        name: coturn_msvc-${{matrix.VCPKG_PLATFORM_TOOLSET}}-${{matrix.CMAKE_GENERATOR_PLATFORM}}-${{matrix.BUILD_SHARED_LIBS}}
        path: |
          ${{github.workspace}}\build\coturn_windows_msvc.zip
          ${{github.workspace}}\build\coturn*.exe
          ${{github.workspace}}\build\coturn*.md5
      

#    - name: Upload To Github Release
#      if: ${{ matrix.BUILD_TYPE == 'Release' && startsWith(github.ref, 'refs/tags/') }}
#      uses: softprops/action-gh-release@v1
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#      with:
#        prerelease: true
#        body:
#        files: |
#          ${{github.workspace}}\build\coturn_windows_msvc.zip
